@page "/Customer"
@using Radzen;
@using Radzen.Blazor;
@using SagErpBlazor.DbClasses;
@using SagErpBlazor.ModelServices;
@using SagErpBlazor.Models;
@using SagErpBlazor.Services;
@inject StsCustomerRegisterService _StsCustomerRegisterService;
@inject StsProjectRegisterService _StsProjectRegisterService;
@inject IJSRuntime JSRuntime;
@inject ImageService _ImageService;
<style>
    .highlighted-row {
        background-color: yellow;
    }
</style>
@if (@_CustomErrorClass.IsError)
{
    <div class="modal modal-alert fade show" id="example-modal-alert1" tabindex="-1" role="dialog" style="padding-right: 17px; display: block;" aria-modal="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Data Saved</h5>
                    <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                        <span aria-hidden="true"><i class="fal fa-times"></i></span>
                    </button>
                </div>
                <div class="modal-body">
                    @_CustomErrorClass.UserMessage
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="CloseModal">Ok</button>
                </div>
            </div>
        </div>
    </div>
}

@if (ShowSuccessMessage)
{
    <div class="modal modal-alert fade show" id="example-modal-alert1" tabindex="-1" role="dialog" style="padding-right: 17px; display: block;" aria-modal="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Data Saved Successfully</h5>
                    <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                        <span aria-hidden="true"><i class="fal fa-times"></i></span>
                    </button>
                </div>
                <div class="modal-body">
                    @_CustomErrorClass.UserMessage
                </div>
                <div class="modal-footer">
                  
                    <button type="button" class="btn btn-primary" @onclick="CloseModal">Ok</button>
                </div>
            </div>
        </div>
    </div>
}


@if (@IsDeleteRecords)
{
    <div class="modal modal-alert fade show" id="example-modal-alert1" tabindex="-1" role="dialog" style="padding-right: 17px; display: block;" aria-modal="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Data Delete</h5>
                    <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                        <span aria-hidden="true"><i class="fal fa-times"></i></span>
                    </button>
                </div>
                <div class="modal-body">
                    Are you Sure you Want to Delete the Selected Records?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="OnDeleteClicked">Confirm</button>
                </div>
            </div>
        </div>
    </div>
}

<main id="js-page-content" role="main" class="page-content">
    <div class="row">
        <div class="col-xl-12">

            <div id="panel-1" class="panel mb-2">
                <div class="panel-hdr d-block">
                    <div class="row">
                        <div class="col-md-6">
                            <h3 class="color-primary-600 NameForm" style="font-weight: 500; font-size: 22px; margin-top: 11px;">
                                Customer Registeration
                            </h3>
                        </div>
                    </div>
                </div>
                <div class="panel-container show">
                    <div class="panel-content">
                        <input type="hidden" @bind="_StsCustomerRegister.CompanyId" />
                        <input type="hidden" @bind="_StsCustomerRegister.RegisterdBy" />
                        <input type="hidden" @bind="_StsCustomerRegister.RegisterDate" />

                    
                       
                            
          
                            <div class="row">
                                <div class="col-md-8 col-sm-8">
                                    <RadzenCard>

                                        <RadzenFileInput @bind-Value=@_StsCustomerRegister.Companylogo TValue="string" class="w-100"
                                                         onchange="@OnProficeChange" Error=@(args => OnPrfileError(args, "FileInput")) />
                                    </RadzenCard>
                                    <RadzenStack Orientation="Radzen.Orientation.Vertical" Gap="1rem">
                                        <RadzenStack Gap="1rem" Orientation="Radzen.Orientation.Horizontal">
                                            <RadzenFormField Style="color:darkmagenta" Text="Customer Code" Variant="Variant.Outlined">
                                            <RadzenNumeric  Disabled=true @bind-Value="@_StsCustomerRegister.CustomerId" />
                                        </RadzenFormField>
                                            <RadzenFormField Text="Customer Name" Variant="Variant.Outlined" Style="flex: 1;color:darkmagenta">
                                            <RadzenTextBox @bind-Value="@_StsCustomerRegister.CustomerName" />
                                        </RadzenFormField>
                                        </RadzenStack>
                                        <RadzenFormField Text="POC Name" Variant="Variant.Outlined" Style="flex: 1;">
                                            <RadzenTextBox @bind-Value="@_StsCustomerRegister.Pocname" />
                                        </RadzenFormField>
                                        <RadzenStack Gap="1rem" Orientation="Radzen.Orientation.Horizontal">

                                            <RadzenFormField Text="POC Email" Variant="Variant.Outlined" Style="flex: 1;">
                                            <RadzenTextBox @bind-Value="@_StsCustomerRegister.Pocemail" />
                                        </RadzenFormField>

                                        <RadzenFormField Text="POC Contact No" Variant="Variant.Outlined">
                                            <RadzenTextBox @bind-Value="@_StsCustomerRegister.Pocnumber" />
                                        </RadzenFormField>
                                        </RadzenStack>


                                        <RadzenStack Gap="1rem" Orientation="Radzen.Orientation.Horizontal">

                                            <RadzenFormField Text="Select Project" Variant="Variant.Outlined" Style="flex: 1;">
                                            <RadzenDropDown AllowClear="true" @bind-Value=@_SelectedProject AllowVirtualization="true"
                                                            AllowFiltering="true"
                                                            Data=@_StsProjectsList TextProperty="ProjectName" ValueProperty="ProjectId" />
                                        </RadzenFormField>
                                        @if (@ISAlreadyAdded)
                                        {
                                            <div class="Validate-feedback">
                                                This project is Already Assigned...
                                            </div>
                                        }
                                        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline"Text="Projects" Click="@AssignProjects" />
                                    </RadzenStack>
                                        <RadzenDataGrid @ref="_CustomerProjects" AllowAlternatingRows="false" AllowFiltering="false" AllowPaging="true" PageSize="5" AllowSorting="false"
                                                        Data="@_StsCustomerRegistersDetail" TItem="StsCustomerRegisterDetail" Density="Density.Compact">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="StsCustomerRegisterDetail" Property="ProjectId" Title="Project ID" Width="20px" />
                                                <RadzenDataGridColumn TItem="StsCustomerRegisterDetail" Property="ProjectDescription" Title="Project Name" Width="160px">

                                                </RadzenDataGridColumn>
                                            <RadzenDataGridColumn TItem="StsCustomerRegisterDetail" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="16px">
            <Template Context="order">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteDetailRow(order))"  @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
                                            </RadzenDataGridColumn>
                                            </Columns>
                                        </RadzenDataGrid>

                                    </RadzenStack>

                                  

                                </div>
                                <div class="col-md-4 col-sm-4">

                                 
                                    <RadzenCard Style="width:400px;">
                                        <div class="row">
                                            <div class="col-md-12 text-truncate">
                                                <RadzenBadge BadgeStyle="BadgeStyle.Light" Text=@($"{_StsCustomerRegister.CustomerId}") class="me-1" />
                                                <b style="color:blue">@(_StsCustomerRegister.CustomerName)</b>
                                            </div>

                                        </div>
                                        <hr style="border: none; background-color: lightgreen; height: 1px; margin: 1rem 0;" />
                                        <div class="d-flex flex-row align-items-center">
                                            <RadzenImage Path="@_StsCustomerRegister.Companylogo" class="rounded-circle float-start me-3" Style="width: 80px; height: 80px;" />
                                            <div>
                                                <h4 style="color:darkred" class="mb-0">@(" "+_StsCustomerRegister.Pocname)</h4>
                                                <div>@_StsCustomerRegister.Pocemail</div>
                                                <div style="font-size: .8em">@(_StsCustomerRegister.Pocnumber)</div>

                                            </div>
                                        </div>
                                        <h3 style="color:darkmagenta">List of Projects:</h3>
                                        <ul>
                                            @foreach (var item in _StsCustomerRegistersDetail)
                                            {
                                                <li>@item.ProjectDescription</li>
                                            }
                                        </ul>

                                    </RadzenCard>
                                </div>
                           
                             
                            
                               
                            </div>
          
                          
                          
                      
                        


                    </div>
                </div>
                <div class="panel-content py-2 rounded-bottom border-faded border-left-0 border-right-0 border-bottom-0">
                    @if (_StsCustomerRegister.CustomerId > 0 && _IsNewRecord==false)
                    {
                        <div class="btn-group float-right" disabled="@IsTaskRunning" style="margin-right:10px;" role="group" id="BtnGroupID2">
                            <button type="button" id="SubmitID2" class="btn btn-danger waves-effect waves-themed" @onclick="DeleteConfirmPopup"><i class="fal fa-check mr-2"></i>Delete</button>
                        </div>
                        <div class="btn-group float-right" disabled="@IsTaskRunning" style="margin-right:10px;" role="group" id="BtnGroupID2">
                            <button type="button" id="SubmitID2" class="btn btn-success waves-effect waves-themed" @onclick="() => OnButtonClicked(false)"><i class="fal fa-check mr-2"></i>Update</button>
                        </div>
                       
                    }
                    else
                    {
                        <div class="btn-group float-right" disabled="@IsTaskRunning" style="margin-right:10px;" role="group" id="BtnGroupID2">
                            <button type="button" id="SubmitID2" class="btn btn-primary waves-effect waves-themed" @onclick="() => OnButtonClicked(true)"><i class="fal fa-check mr-2"></i>Save</button>
                        </div>
                    }
                    <div class="btn-group float-right" disabled="@IsTaskRunning" style="margin-right:10px;" role="group" id="BtnGroupID2">
                        <button type="button" id="btnCancel" class="btn btn-warning waves-effect waves-themed" @onclick="() => RefreshProjectRegisterOnSaving()"><i class="fal fa-check mr-2"></i>Cancel</button>
                    </div>

                </div>

            </div>

        </div>
    </div>



    <div class="row">
        <div class="col-xl-12">
            <div id="panel-1" class="panel">
                <div class="panel-hdr">
                    <h2>
                        Customers <span class="fw-300"><i>List</i></span>
                    </h2>
                    <div class="panel-toolbar">
                        <button class="btn btn-panel" data-action="panel-collapse" data-toggle="tooltip" data-offset="0,10" data-original-title="Collapse"></button>
                        <button class="btn btn-panel" data-action="panel-fullscreen" data-toggle="tooltip" data-offset="0,10" data-original-title="Fullscreen"></button>
                        <button class="btn btn-panel" data-action="panel-close" data-toggle="tooltip" data-offset="0,10" data-original-title="Close"></button>
                    </div>
                </div>
              

                <RadzenDataGrid style="--rz-grid-header-background-color:pink;" @ref="_StsCustomerGrid" Density="Density.Compact" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" RowRender="@MasterRowRender" ExpandMode="DataGridExpandMode.Single"
                                Data="@_StsCustomerRegistersList" TItem="StsCustomerRegister" RowExpand="MasterRowExpand"
                                RowDoubleClick="@SelectRowData">
                    <Template Context="StsCustomerRegister">
                        <RadzenCard Style="width:300px;">
                            <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@_LinkedStsCustomersDetail" TItem="StsCustomerRegisterDetail">
                            <Columns>
                                    <RadzenDataGridColumn TItem="StsCustomerRegisterDetail" Width="20px" Property="ProjectId" Title="Project ID" />
                                    <RadzenDataGridColumn TItem="StsCustomerRegisterDetail" Width="300px" Property="ProjectDescription" Title="Project Name" />
                            </Columns>
                        </RadzenDataGrid>
                        </RadzenCard>
                    </Template>
                    <Columns>

                        <RadzenDataGridColumn TItem="StsCustomerRegister" Property="CustomerId" Title="Customer ID" Width="20px" />
                        <RadzenDataGridColumn TItem="StsCustomerRegister" Property="CustomerName" Title="Customer Name" Width="100px">
                            <Template Context="StsCustomerRegisterObj">
                                <RadzenImage Path="@StsCustomerRegisterObj.Companylogo" style="width: 32px; height: 32px; border-radius: 16px; margin-right: 6px;" />
                                @StsCustomerRegisterObj.CustomerName
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="StsCustomerRegister" Property="Pocname" Title="POC Name" Width="100px" />
                       
                        <RadzenDataGridColumn TItem="StsCustomerRegister" Property="Pocemail" Title="Email " Width="40px" />
                       
                       
                    </Columns>
                </RadzenDataGrid>




            </div>
        </div>




    </div>


</main>
@code {
    public bool ShowSuccessMessage = false;
    private IEnumerable<StsProjectRegister> _StsProjectsList = new List<StsProjectRegister>();
    private StsCustomerRegister _StsCustomerRegister = new StsCustomerRegister();
    RadzenDataGrid<StsCustomerRegister> _StsCustomerGrid;
    StsCustomerRegister _StsCustomerGrid1 = new StsCustomerRegister();
    private int _SelectedProject;

    [CascadingParameter]
    private Task<AuthenticationState> _AuthenticationStateTask { get; set; }
    ClaimsPrincipal _User;
    private List<StsCustomerRegister> _StsCustomerRegistersList = new List<StsCustomerRegister>();
    private List<StsCustomerRegisterDetail> _StsCustomerRegistersDetail = new List<StsCustomerRegisterDetail>();


    private List<StsCustomerRegisterDetail> _SavedStsCustomerRegistersDetail = new List<StsCustomerRegisterDetail>();
    private RadzenDataGrid<StsCustomerRegisterDetail> _CustomerProjects ;

    private RadzenDataGrid<StsCustomerRegisterDetail> _AssignedProjects;


    private List<StsCustomerRegister> _StsCustomerRegistersListFilterData = new List<StsCustomerRegister>();
    private CustomErrorClass _CustomErrorClass = new CustomErrorClass();
    private bool IsProjectName = false;
    private string searchValue { get; set; }

    private Timer highlightTimer;

    private bool IsTaskRunning = false;
    private bool _IsNewRecord = true;

    private string CompanyLogo { get; set; }
    private long? CompanyLogoSize { get; set; }
    private byte[] ImageUploaded { get; set; }

    private List<StsCustomerRegisterDetail> _LinkedStsCustomersDetail = new List<StsCustomerRegisterDetail>();

    private async Task OnButtonClicked(bool IsNewRecord = false)
    {
        IsTaskRunning = true;
        _IsNewRecord = IsNewRecord;
        IsTaskRunning = await ValidateFields();
        StateHasChanged();
    }
    private bool IsDeleteRecords = false;
    private void DeleteConfirmPopup()
    {
        IsDeleteRecords = true;
    }
    async void OnDeleteClicked()
    {

        IsTaskRunning = true;
        _CustomErrorClass = await _StsCustomerRegisterService.DeleteProject(_StsCustomerRegister.CustomerId);

        if (!_CustomErrorClass.IsError)
        {
            _StsCustomerRegistersList.RemoveAll(pr => pr.CustomerId == _StsCustomerRegister.CustomerId);
            RefreshProjectRegisterOnSaving();
            await _StsCustomerGrid.Reload();
        }
        IsTaskRunning = false;
        StateHasChanged();
    }

    private async Task LodCustomersList()
    {
        _StsCustomerRegistersList = await _StsCustomerRegisterService.GetAllCustomers(Convert.ToInt32(_User.FindFirst("CompanyID").Value));
        _SavedStsCustomerRegistersDetail = await _StsCustomerRegisterService.GetAllCustomersDetail(Convert.ToInt32(_User.FindFirst("CompanyID").Value));

    }

    private async Task LoadProjectsList()
    {
        _StsProjectsList = await _StsProjectRegisterService.GetAllProjects(Convert.ToInt32(_User.FindFirst("CompanyID").Value));

    }

    private void CloseModal()
    {
        _CustomErrorClass.IsError = false;
        _CustomErrorClass.UserMessage = "";
        ShowSuccessMessage = false;
    }
    private void ShowErrorDetail()
    {
        _CustomErrorClass.IsError = true;
        _CustomErrorClass.UserMessage = _CustomErrorClass.ActualException;
    }
    protected override async Task OnInitializedAsync()
    {
        _User = (await _AuthenticationStateTask).User;

        if (_User.Identity.IsAuthenticated)
        {
            var customerID = _StsCustomerRegisterService.MissingSequenceNo(Convert.ToInt32(_User.FindFirst("CompanyID").Value));
            _StsCustomerRegister.CustomerId = Convert.ToInt32(customerID);

            _StsCustomerRegister.CompanyId = Convert.ToInt32(_User.FindFirst("CompanyID").Value);
            _StsCustomerRegister.RegisterDate = DateTime.Now;
            _StsCustomerRegister.RegisterdBy = Convert.ToInt32(_User.FindFirst("Userid").Value);

            await LodCustomersList();
            await LoadProjectsList();
        }

    }
    private void RefreshProjectRegisterOnSaving()
    {
        _StsCustomerRegister = new StsCustomerRegister();
        var customerID = _StsCustomerRegisterService.MissingSequenceNo(Convert.ToInt32(_User.FindFirst("CompanyID").Value));
        _StsCustomerRegister.CustomerId = Convert.ToInt32(customerID);

        _StsCustomerRegister.CompanyId = Convert.ToInt32(_User.FindFirst("CompanyID").Value);
        _StsCustomerRegister.RegisterDate = DateTime.Now;
        _StsCustomerRegister.RegisterdBy = Convert.ToInt32(_User.FindFirst("Userid").Value);
        _StsCustomerRegistersDetail = new List<StsCustomerRegisterDetail>();
        IsDeleteRecords = false;
        _IsNewRecord = true;
    }
    protected override async Task OnAfterRenderAsync(bool firsRender)
    {
        if (firsRender)
        {
            //await JSRuntime.InvokeVoidAsync("initDataTable");
        }

    }


    private async Task<bool> ValidateFields()
    {
        bool AllValuesareValid = true;
        if (string.IsNullOrEmpty(_StsCustomerRegister.CustomerName))
        {
            IsProjectName = true;
            AllValuesareValid = false;

        }
        if (AllValuesareValid)
        {
            bool isUpdateRecords = false;


            if (_StsCustomerRegister.CustomerId > 0 && _IsNewRecord==false)
            {

                (_CustomErrorClass, _StsCustomerGrid1) = await _StsCustomerRegisterService.UpdateCustomer(_StsCustomerRegister,_StsCustomerRegistersDetail);
                isUpdateRecords = true;
            }
            else
            {
                (_CustomErrorClass, _StsCustomerGrid1) = await _StsCustomerRegisterService.AddCustomersAsync(_StsCustomerRegister,_StsCustomerRegistersDetail);
            }
            if (!_CustomErrorClass.IsError)
            {
                if (!isUpdateRecords)
                {
                    _StsCustomerRegistersList.Insert(0, _StsCustomerGrid1);
                    _StsCustomerRegistersListFilterData = _StsCustomerRegistersList;
                }
                ShowSuccessMessage = true;
                await _StsCustomerGrid.Reload();
                RefreshProjectRegisterOnSaving();
                StateHasChanged();
                return await Task.FromResult(true);
            }
            else
            {
                return await Task.FromResult(false);
            }

        }

        return await Task.FromResult(false);
    }



    private void CustomRowRender(RowRenderEventArgs<StsCustomerRegister> args)
    {
        if (args.Data == _StsCustomerGrid1)
        {

            //args.Attributes.Add("style", $"background-color:blue;font-weight:bold;");
            args.Attributes.Add("style", $"background-color:00FF00;color:#00FF00;font-weight:bold;");

        }
    }
    private void SelectRowData(DataGridRowMouseEventArgs<StsCustomerRegister> args)
    {
        if (args.Data.CustomerId > 0)
        {

            _StsCustomerRegister = _StsCustomerRegistersList.FirstOrDefault(pr => pr.CustomerId == (args.Data.CustomerId));

            _StsCustomerRegistersDetail = _SavedStsCustomerRegistersDetail.Where(pr => pr.CustomerId == (args.Data.CustomerId)).ToList();
            _IsNewRecord = false;
            StateHasChanged();
        }
    }


    private async void OnProficeChange(FileUploadEventArgs e)
    {

        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            ImageUploaded = memoryStream.ToArray();
        }
    }

    void OnPrfileError(UploadErrorEventArgs args, string name)
    {

    }
    private StsCustomerRegisterDetail NewProjectInsert;
    private StsCustomerRegisterDetail ProjectUpdate;
    private void ResetDetailRecords()
    {
        NewProjectInsert = null;
        NewProjectInsert = null;
    }
    private bool ISAlreadyAdded=false;
    private  async Task AssignProjects()
    {

        var   NewProjectInsert = new StsCustomerRegisterDetail();

       

      
        StsCustomerRegisterDetail ExistingProject = _StsCustomerRegistersDetail.FirstOrDefault(project => project.ProjectId == _SelectedProject);

        if (ExistingProject != null || _SelectedProject == 0)
        {
            ISAlreadyAdded = true;
        }
        else
        {
            ISAlreadyAdded = false;
            StsProjectRegister FetchProject = _StsProjectsList.FirstOrDefault(project => project.ProjectId == _SelectedProject);
            NewProjectInsert.ProjectId = FetchProject.ProjectId;
            NewProjectInsert.ProjectDescription = FetchProject.ProjectName;
            NewProjectInsert.CustomerId = _StsCustomerRegister.CustomerId;

            _StsCustomerRegistersDetail.Add(NewProjectInsert);
            await _CustomerProjects.Reload();
            //await _AssignedProjects.Reload();
            
            _SelectedProject = 0;
        }
        StateHasChanged();
    }

    



    async Task DeleteDetailRow(StsCustomerRegisterDetail order)
    {
        ResetDetailRecords();

        if (_StsCustomerRegistersDetail.Contains(order))
        {

            _StsCustomerRegistersDetail.Remove(order);
            await _CustomerProjects.Reload();
            //await _AssignedProjects.Reload();
            StateHasChanged();
        }
       
    }

  
    void MasterRowRender(RowRenderEventArgs<StsCustomerRegister> args)
    {
        args.Expandable = true;
    }

    void MasterRowExpand(StsCustomerRegister _CustomerObject)
    {
       
        _LinkedStsCustomersDetail = _SavedStsCustomerRegistersDetail.Where(o => o.CustomerId == _CustomerObject.CustomerId).ToList();
        
    }



}
