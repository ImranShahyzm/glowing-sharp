@page "/SupportEngineer"
@using Radzen;
@using Radzen.Blazor;
@using SagErpBlazor.DbClasses;
@using SagErpBlazor.ModelServices;
@using SagErpBlazor.Models;
@inject StsSupportStaffService _StsSupportStaffService;
@inject IJSRuntime JSRuntime;

@if (@_CustomErrorClass.IsError)
{
    <div class="modal modal-alert fade show" id="example-modal-alert1" tabindex="-1" role="dialog" style="padding-right: 17px; display: block;" aria-modal="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Data Saved</h5>
                    <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                        <span aria-hidden="true"><i class="fal fa-times"></i></span>
                    </button>
                </div>
                <div class="modal-body">
                    @_CustomErrorClass.UserMessage
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="CloseModal">Ok</button>
                </div>
            </div>
        </div>
    </div>
}
@if (@ShowSuccessMessage)
{
    <div class="modal modal-alert fade show" id="example-modal-alert1" tabindex="-1" role="dialog" style="padding-right: 17px; display: block;" aria-modal="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Data Saved Successfully</h5>
                    <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                        <span aria-hidden="true"><i class="fal fa-times"></i></span>
                    </button>
                </div>
                <div class="modal-body">
                    @_CustomErrorClass.UserMessage
                </div>
                <div class="modal-footer">

                    <button type="button" class="btn btn-primary" @onclick="CloseModal">Ok</button>
                </div>
            </div>
        </div>
    </div>
}


@if (@IsDeleteRecords)
{
    <div class="modal modal-alert fade show" id="example-modal-alert1" tabindex="-1" role="dialog" style="padding-right: 17px; display: block;" aria-modal="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Data Delete</h5>
                    <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                        <span aria-hidden="true"><i class="fal fa-times"></i></span>
                    </button>
                </div>
                <div class="modal-body">
                    Are you Sure you Want to Delete the Selected Records?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="OnDeleteClicked">Confirm</button>
                </div>
            </div>
        </div>
    </div>
}

<main id="js-page-content" role="main" class="page-content">
    <div class="row">
        <div class="col-xl-12">

            <div id="panel-1" class="panel mb-2">
                <div class="panel-hdr d-block">
                    <div class="row">
                        <div class="col-md-6">
                            <h3 class="color-primary-600 NameForm" style="font-weight: 500; font-size: 22px; margin-top: 11px;">
                                Register Support Engineer
                            </h3>
                        </div>
                    </div>
                </div>
                <div class="panel-container show">
                    <div class="panel-content">
                        <input type="hidden" @bind="_StsSupportStaff.CompanyId" />
                        <input type="hidden" @bind="_StsSupportStaff.RegisterdBy" />
                        <input type="hidden" @bind="_StsSupportStaff.RegisterDate" />
                        <div class="row">
                            <div class="col-md-8 col-sm-8">
                                <RadzenCard>

                                    <RadzenFileInput @bind-Value=@_StsSupportStaff.ProfileImage TValue="string" class="w-100"
                                                     onchange="@OnProficeChange" Error=@(args => OnPrfileError(args, "FileInput")) />
                                </RadzenCard>
                                <RadzenStack Orientation="Radzen.Orientation.Vertical" Gap="1rem">
                                    <RadzenStack Gap="1rem" Orientation="Radzen.Orientation.Horizontal">
                                        <RadzenFormField Style="color:darkmagenta" Text="Code" Variant="Variant.Outlined">
                                            <RadzenNumeric Disabled=true @bind-Value="@_StsSupportStaff.SupportStaffId" />
                                        </RadzenFormField>
                                        <RadzenFormField Text="Employee Name" Variant="Variant.Outlined" Style="flex: 1;color:darkmagenta">
                                            <RadzenTextBox @bind-Value="@_StsSupportStaff.Name" />
                                        </RadzenFormField>
                                    </RadzenStack>
                                 
                                    <RadzenStack Gap="1rem" Orientation="Radzen.Orientation.Horizontal">

                                        <RadzenFormField Text="Email Address" Variant="Variant.Outlined" Style="flex: 1;">
                                            <RadzenTextBox @bind-Value="@_StsSupportStaff.EmailAddress" />
                                        </RadzenFormField>

                                        <RadzenFormField Text="Phone No" Variant="Variant.Outlined">
                                            <RadzenTextBox @bind-Value="@_StsSupportStaff.PhoneNo" />
                                        </RadzenFormField>
                                    </RadzenStack>
                               

                                

                                </RadzenStack>



                            </div>
                            <div class="col-md-4 col-sm-4">


                                <RadzenCard Style="width:400px;">
                                    <div class="row">
                                        <div class="col-md-12 text-truncate">
                                            <RadzenBadge BadgeStyle="BadgeStyle.Light" Text=@($"{_StsSupportStaff.SupportStaffId}") class="me-1" />
                                            <b style="color:blue">@(_StsSupportStaff.Name)</b>
                                        </div>

                                    </div>
                                    <hr style="border: none; background-color: lightgreen; height: 1px; margin: 1rem 0;" />
                                    <div class="d-flex flex-row align-items-center">
                                        <RadzenImage Path="@_StsSupportStaff.ProfileImage" class="rounded-circle float-start me-3" Style="width: 180px; height: 80px;" />
                                        <div>
                                            <h4 style="color:darkred" class="mb-0">@(" " + _StsSupportStaff.EmailAddress)</h4>
                                            <div>@_StsSupportStaff.PhoneNo</div>
                                           
                                        </div>
                                    </div>
                                   
                                </RadzenCard>
                            </div>




                        </div>







                    </div>
                </div>
                <div class="panel-content py-2 rounded-bottom border-faded border-left-0 border-right-0 border-bottom-0">
                    @if (_StsSupportStaff.SupportStaffId > 0 && _IsNewRecord == false)
                    {
                        <div class="btn-group float-right" disabled="@IsTaskRunning" style="margin-right:10px;" role="group" id="BtnGroupID2">
                            <button type="button" id="SubmitID2" class="btn btn-danger waves-effect waves-themed" @onclick="DeleteConfirmPopup"><i class="fal fa-check mr-2"></i>Delete</button>
                        </div>
                        <div class="btn-group float-right" disabled="@IsTaskRunning" style="margin-right:10px;" role="group" id="BtnGroupID2">
                            <button type="button" id="SubmitID2" class="btn btn-success waves-effect waves-themed" @onclick="() => OnButtonClicked(false)"><i class="fal fa-check mr-2"></i>Update</button>
                        </div>

                    }
                    else
                    {
                        <div class="btn-group float-right" disabled="@IsTaskRunning" style="margin-right:10px;" role="group" id="BtnGroupID2">
                            <button type="button" id="SubmitID2" class="btn btn-primary waves-effect waves-themed" @onclick="() => OnButtonClicked(true)"><i class="fal fa-check mr-2"></i>Save</button>
                        </div>
                    }
                    <div class="btn-group float-right" disabled="@IsTaskRunning" style="margin-right:10px;" role="group" id="BtnGroupID2">
                        <button type="button" id="btnCancel" class="btn btn-warning waves-effect waves-themed" @onclick="() => RefreshProjectRegisterOnSaving()"><i class="fal fa-check mr-2"></i>Cancel</button>
                    </div>

                </div>

            </div>

        </div>

        <div class="row">
            <div class="col-xl-12">
                <div id="panel-1" class="panel">
                    <div class="panel-hdr">
                        <h2>
                            Technical Employees <span class="fw-300"><i>List</i></span>
                        </h2>
                        <div class="panel-toolbar">
                            <button class="btn btn-panel" data-action="panel-collapse" data-toggle="tooltip" data-offset="0,10" data-original-title="Collapse"></button>
                            <button class="btn btn-panel" data-action="panel-fullscreen" data-toggle="tooltip" data-offset="0,10" data-original-title="Fullscreen"></button>
                            <button class="btn btn-panel" data-action="panel-close" data-toggle="tooltip" data-offset="0,10" data-original-title="Close"></button>
                        </div>
                    </div>
                    <div class="panel-container show">
                        <div class="panel-content">

                            <RadzenDataGrid @ref="_StsSupportStaffGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                                            Data="@_StsSupportStaffList" TItem="StsSupportStaff" RowRender="@CustomRowRender" RowDoubleClick="@SelectRowData" Density="Density.Compact">

                                <Columns>
                                    <RadzenDataGridColumn Width="50px" TItem="StsSupportStaff" Property="SupportStaffId" Title="Code">
                                        <FooterTemplate>
                                            Total orders: <b>@_StsSupportStaffList.Count()</b>
                                        </FooterTemplate>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="StsSupportStaff" Property="Name" Title="Employee Name" Width="300px">
                                        <Template Context="StsSupportStaffObj">
                                            <RadzenImage Path="@StsSupportStaffObj.ProfileImage" style="width: 32px; height: 32px; border-radius: 16px; margin-right: 6px;" />
                                            @StsSupportStaffObj.Name
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="StsSupportStaff" Property="EmailAddress" Title="Email Address">
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="StsSupportStaff" Property="RegisterDate" Title="Register Date">
                                        <Template Context="StsSupportStaff">
                                            @StsSupportStaff.RegisterDate?.ToString("dd-MMM-yyyy")
                                        </Template>

                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="StsSupportStaff" Property="ActiveStatus" Title="Project Status">
                                        <Template Context="StsSupportStaff">
                                            @(StsSupportStaff.ActiveStatus == null || StsSupportStaff.ActiveStatus == false ? "Active" : "Not Active")
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>


                        </div>
                    </div>
                </div>
            </div>




        </div>
    </div>



     


</main>

<style>
    .highlighted-row {
        background-color: yellow;
    }
</style>

@code {
    private StsSupportStaff _StsSupportStaff = new StsSupportStaff();
    StsSupportStaff _StsSupportStaffResult = new StsSupportStaff();
    RadzenDataGrid<StsSupportStaff> _StsSupportStaffGrid;
    private List<StsSupportStaff> _StsSupportStaffList = new List<StsSupportStaff>();
    private List<StsSupportStaff> _StsSupportStaffListOrderdList = new List<StsSupportStaff>();


    private bool IsTaskRunning = false;
    private bool _IsNewRecord = true;
    private bool IsName = false;
    private bool ShowSuccessMessage=false;
    private byte[] ImageUploaded { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> _AuthenticationStateTask { get; set; }
    ClaimsPrincipal _User;
    private CustomErrorClass _CustomErrorClass = new CustomErrorClass();
    protected override async Task OnInitializedAsync()
    {
        _User = (await _AuthenticationStateTask).User;

        if (_User.Identity.IsAuthenticated)
        {
            var customerID = _StsSupportStaffService.MissingSequenceNo(Convert.ToInt32(_User.FindFirst("CompanyID").Value));
            _StsSupportStaff.SupportStaffId = Convert.ToInt32(customerID);

            _StsSupportStaff.CompanyId = Convert.ToInt32(_User.FindFirst("CompanyID").Value);
            _StsSupportStaff.RegisterDate = DateTime.Now;
            _StsSupportStaff.RegisterdBy = Convert.ToInt32(_User.FindFirst("Userid").Value);

            await LoadAlreadySavedRecords();
        }

    }
    private async void OnProficeChange(FileUploadEventArgs e)
    {

        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            ImageUploaded = memoryStream.ToArray();
        }
    }
    private bool IsDeleteRecords = false;
    private void DeleteConfirmPopup()
    {
        IsDeleteRecords = true;
    }
    void OnPrfileError(UploadErrorEventArgs args, string name)
    {

    }
    async void OnDeleteClicked()
    {

        IsTaskRunning = true;
        _CustomErrorClass = await _StsSupportStaffService.DeleteStaff(_StsSupportStaff.SupportStaffId);

        if (!_CustomErrorClass.IsError)
        {
            _StsSupportStaffList.RemoveAll(pr => pr.SupportStaffId == _StsSupportStaff.SupportStaffId);
            RefreshProjectRegisterOnSaving();
            await _StsSupportStaffGrid.Reload();
        }
        IsTaskRunning = false;
        StateHasChanged();
    }
    private async Task OnButtonClicked(bool IsNewRecord = false)
    {
        IsTaskRunning = true;
        _IsNewRecord = IsNewRecord;
        IsTaskRunning = await ValidateFields();
        StateHasChanged();
    }
    private void RefreshProjectRegisterOnSaving()
    {
        _StsSupportStaff = new StsSupportStaff();
        var SupportStaffId = _StsSupportStaffService.MissingSequenceNo(Convert.ToInt32(_User.FindFirst("CompanyID").Value));
        _StsSupportStaff.SupportStaffId = Convert.ToInt32(SupportStaffId);

        _StsSupportStaff.CompanyId = Convert.ToInt32(_User.FindFirst("CompanyID").Value);
        _StsSupportStaff.RegisterDate = DateTime.Now;
        _StsSupportStaff.RegisterdBy = Convert.ToInt32(_User.FindFirst("Userid").Value);
     
        IsDeleteRecords = false;
        _IsNewRecord = true;
    }
    private async Task<bool> ValidateFields()
    {
        bool AllValuesareValid = true;
        if (string.IsNullOrEmpty(_StsSupportStaff.Name))
        {
            IsName = true;
            AllValuesareValid = false;

        }
        if (AllValuesareValid)
        {
            bool isUpdateRecords = false;


            if (_StsSupportStaff.SupportStaffId > 0 && _IsNewRecord == false)
            {

                (_CustomErrorClass, _StsSupportStaffResult) = await _StsSupportStaffService.UpdateTechnicalStaff(_StsSupportStaff);
                isUpdateRecords = true;
            }
            else
            {
                (_CustomErrorClass, _StsSupportStaffResult) = await _StsSupportStaffService.AddTechnicalStaff(_StsSupportStaff);
            }
            if (!_CustomErrorClass.IsError)
            {
                if (!isUpdateRecords)
                {
                    _StsSupportStaffList.Insert(0, _StsSupportStaffResult);
                    _StsSupportStaffListOrderdList = _StsSupportStaffList;
                }
                ShowSuccessMessage = true;
               
                RefreshProjectRegisterOnSaving();
                StateHasChanged();
                return await Task.FromResult(true);
            }
            else
            {
                return await Task.FromResult(false);
            }

        }

        return await Task.FromResult(false);
    }
    private async Task LoadAlreadySavedRecords()
    {
        _StsSupportStaffList = await _StsSupportStaffService.GetAllSupportStaff(Convert.ToInt32(_User.FindFirst("CompanyID").Value));
        _StsSupportStaffListOrderdList = _StsSupportStaffList.OrderByDescending(x => x.SupportStaffId).ToList();

    }
    private void CloseModal()
    {
        _CustomErrorClass.IsError = false;
        _CustomErrorClass.UserMessage = "";
        ShowSuccessMessage = false;
    }
    private void CustomRowRender(RowRenderEventArgs<StsSupportStaff> args)
    {
        if (args.Data == _StsSupportStaffResult)
        {

            //args.Attributes.Add("style", $"background-color:blue;font-weight:bold;");
            args.Attributes.Add("style", $"background-color:00FF00;color:#00FF00;font-weight:bold;");

        }
    }
    private void SelectRowData(DataGridRowMouseEventArgs<StsSupportStaff> args)
    {
        if (args.Data.SupportStaffId > 0)
        {

            _StsSupportStaff = _StsSupportStaffList.FirstOrDefault(pr => pr.SupportStaffId == (args.Data.SupportStaffId));
            _IsNewRecord = false;
            StateHasChanged();
        }
    }
}
