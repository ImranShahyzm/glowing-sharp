@page "/Projects"
@using Radzen;
@using Radzen.Blazor;
@using SagErpBlazor.DbClasses;
@using SagErpBlazor.ModelServices;
@using SagErpBlazor.Models;
@inject StsProjectRegisterService _StsProjectRegisterService;
@inject IJSRuntime JSRuntime;

<style>
    .highlighted-row {
        background-color: yellow;
    }
</style>
@if (@_CustomErrorClass.IsError)
{
    <div class="modal modal-alert fade show" id="example-modal-alert1" tabindex="-1" role="dialog" style="padding-right: 17px; display: block;" aria-modal="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Data Saved</h5>
                    <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                        <span aria-hidden="true"><i class="fal fa-times"></i></span>
                    </button>
                </div>
                <div class="modal-body">
                    @_CustomErrorClass.UserMessage
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="CloseModal">Ok</button>
                </div>
            </div>
        </div>
    </div>
}


@if (@IsDeleteRecords)
{
    <div class="modal modal-alert fade show" id="example-modal-alert1" tabindex="-1" role="dialog" style="padding-right: 17px; display: block;" aria-modal="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Data Delete</h5>
                    <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                        <span aria-hidden="true"><i class="fal fa-times"></i></span>
                    </button>
                </div>
                <div class="modal-body">
                   Are you Sure you Want to Delete the Selected Records?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="OnDeleteClicked">Confirm</button>
                </div>
            </div>
        </div>
    </div>
}

 <main id="js-page-content" role="main" class="page-content">
<div class="row">
    <div class="col-xl-12">

        <div id="panel-1" class="panel mb-2">
            <div class="panel-hdr d-block">
                <div class="row">
                    <div class="col-md-6">
                        <h3 class="color-primary-600 NameForm" style="font-weight: 500; font-size: 22px; margin-top: 11px;"></h3>
                    </div>
                </div>
            </div>
            <div class="panel-container show">
                <div class="panel-content">
                        <input type="hidden" @bind="_StsProjectRegister.CompanyId" />
                        <input type="hidden" @bind="_StsProjectRegister.RegisteredBy" />
                        <input type="hidden" @bind="_StsProjectRegister.RegisterDate" />
                             <fieldset style="border-color: orangered;">
                    <legend>Project Detail Info. </legend>
                        <div class="row">
                            <div class="col-md-4">

                                <div class="form-group">
                                    <label class="font-weight-bold text-primary">Project Code:</label>
                                    <input type="text" @bind="@_StsProjectRegister.ProjectCode" class="form-control" placeholder="Project Code..." readonly />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="font-weight-bold text-primary">Deployment Date:</label>
                                    <div class="input-group">
                                       <input   type="date"  class="form-control" Format="dd-MMM-yyyy" @bind="@_StsProjectRegister.ProjectDeploymentDate" />
                                    </div>

                                </div>
                            </div>

                            <div class="col-md-4">
                               
                                <div class="form-group">
                                    <label class="font-weight-bold text-primary">Project Name:</label>
                                    <input type="text" @bind="@_StsProjectRegister.ProjectName" class="form-control" placeholder="Project Name..." required/>
                                    @if (@IsProjectName)
                                    {
                                        <div class="Validate-feedback">
                                           Please Enter Proper Project Name....
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="font-weight-bold text-primary">Support Date Started:</label>

                                    <input type="date" @bind="@_StsProjectRegister.ProjectSupportDate" class="form-control" />
                                   

                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="font-weight-bold text-primary">Expiry Date:</label>
                                    <div class="input-group">
                                    
                                        <input type="date" @bind="@_StsProjectRegister.ProjectExpiryDate" class="form-control" />

                                    </div>

                                </div>
                            </div>
                            <div class="col-md-2 custom-control custom-checkbox" style="margin-top:40px;padding-left:2.625rem;">
                                <input type="checkbox" id="ProjectStatus" @bind="@_StsProjectRegister.ProjectStatus" class="custom-control-input" value="true" />
                                <label class="custom-control-label" for="ProjectStatus">Is Closed ?</label>
                            </div>
                                <div class="col-md-12">
                                @if (!@_CustomErrorClass.IsError && !string.IsNullOrEmpty(_CustomErrorClass.UserMessage))
                                {
                                        <div class="float-right">

                                            <span class="text_overflow" style="color:red;font-weight:bold;"> @_CustomErrorClass.UserMessage</span>
                                    @if(!string.IsNullOrEmpty(@_CustomErrorClass.ActualException))
                                    {
                                       <a @onclick="ShowErrorDetail">Click here to See Details</a>
                                    }
                                    </div>
                                }
                                </div>
                         </div>
                        </fieldset>


                </div>
            </div>
                <div class="panel-content py-2 rounded-bottom border-faded border-left-0 border-right-0 border-bottom-0">
                   @if(_StsProjectRegister.ProjectId>0)
                   {
                        <div class="btn-group float-right" disabled="@IsTaskRunning" style="margin-right:10px;" role="group" id="BtnGroupID2">
                            <button type="button" id="SubmitID2" class="btn btn-danger waves-effect waves-themed" @onclick="DeleteConfirmPopup"><i class="fal fa-check mr-2"></i>Delete</button>
                        </div>
                    <div class="btn-group float-right" disabled="@IsTaskRunning" style="margin-right:10px;" role="group" id="BtnGroupID2">
                            <button type="button" id="SubmitID2" class="btn btn-success waves-effect waves-themed" @onclick="OnButtonClicked"><i class="fal fa-check mr-2"></i>Update</button>
                    </div>
                   }
                   else
                   {
                        <div class="btn-group float-right" disabled="@IsTaskRunning" style="margin-right:10px;" role="group" id="BtnGroupID2">
                            <button type="button" id="SubmitID2" class="btn btn-primary waves-effect waves-themed" @onclick="OnButtonClicked"><i class="fal fa-check mr-2"></i>Save</button>
                    </div>
                   }

                </div>
                
        </div>

    </div>
</div>



   <div class="row">
        <div class="col-xl-12">
            <div id="panel-1" class="panel">
                <div class="panel-hdr">
                    <h2>
                        Projects <span class="fw-300"><i>List</i></span>
                    </h2>
                    <div class="panel-toolbar">
                        <button class="btn btn-panel" data-action="panel-collapse" data-toggle="tooltip" data-offset="0,10" data-original-title="Collapse"></button>
                        <button class="btn btn-panel" data-action="panel-fullscreen" data-toggle="tooltip" data-offset="0,10" data-original-title="Fullscreen"></button>
                        <button class="btn btn-panel" data-action="panel-close" data-toggle="tooltip" data-offset="0,10" data-original-title="Close"></button>
                    </div>
                </div>
                <div class="panel-container show">
                    <div class="panel-content">
                       
                        <RadzenDataGrid @ref="_StsProjectNew" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                                        Data="@_StsProjectRegistersList" TItem="StsProjectRegister" RowRender="@CustomRowRender" RowDoubleClick="@SelectRowData" Density="Density.Compact" >
                                       
                            <Columns>
                                <RadzenDataGridColumn Width="200px" TItem="StsProjectRegister" Property="ProjectId" Title="Project ID"  >
                                    <FooterTemplate>
                                        Total orders: <b>@_StsProjectRegistersList.Count()</b>
                                    </FooterTemplate>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn Width="200px" TItem="StsProjectRegister" Property="ProjectCode" Title="Project Code" />
                                <RadzenDataGridColumn TItem="StsProjectRegister" Property="ProjectName" Title="ProjectName">
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="StsProjectRegister" Property="ProjectDeploymentDate" Title="Deployment Date">
                                    <Template Context="StsProjectRegister">
                                        @StsProjectRegister.ProjectDeploymentDate?.ToString("dd-MMM-yyyy")
                                    </Template>

                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="StsProjectRegister" Property="ProjectStatus" Title="Project Status">
                                    <Template Context="StsProjectRegister">
                                        @(StsProjectRegister.ProjectStatus == null || StsProjectRegister.ProjectStatus == false ? "Active" : "Not Active")
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    

                    </div>
                </div>
            </div>
        </div>




    </div>

   
</main>
@code {

    private StsProjectRegister _StsProjectRegister = new StsProjectRegister();
    RadzenDataGrid<StsProjectRegister> _StsProjectNew ;
    StsProjectRegister _StsProjectNew1 = new StsProjectRegister();

    [CascadingParameter]
    private Task<AuthenticationState> _AuthenticationStateTask { get; set; }
    ClaimsPrincipal _User;
    private List<StsProjectRegister> _StsProjectRegistersList = new List<StsProjectRegister>();
    private List<StsProjectRegister> _StsProjectRegistersListFilterData = new List<StsProjectRegister>();
    private CustomErrorClass _CustomErrorClass = new CustomErrorClass();
    private bool IsProjectName = false;
    private string searchValue { get; set; }

    private Timer highlightTimer;

    private bool IsTaskRunning=false;
    async void OnButtonClicked()
    {
        IsTaskRunning = true;

        IsTaskRunning=await ValidateFields();
        StateHasChanged();
    }
    private bool IsDeleteRecords = false;
    private  void DeleteConfirmPopup()
    {
        IsDeleteRecords = true;
    }
    async void OnDeleteClicked()
    {

        IsTaskRunning = true;
        _CustomErrorClass=await _StsProjectRegisterService.DeleteProject(_StsProjectRegister.ProjectId);

        if(!_CustomErrorClass.IsError)
        {
            _StsProjectRegistersList.RemoveAll(pr => pr.ProjectId == _StsProjectRegister.ProjectId);
            RefreshProjectRegisterOnSaving();
            await _StsProjectNew.Reload();
        }
        IsTaskRunning =false;
        StateHasChanged();
    }

    private async Task LoadProjectsList()
    {
        _StsProjectRegistersList = await _StsProjectRegisterService.GetAllProjects(Convert.ToInt32(_User.FindFirst("CompanyID").Value));
        _StsProjectRegistersListFilterData = _StsProjectRegistersList.OrderByDescending(x=>x.ProjectCode).ToList();

    }

    private void FilterData(string value)
    {
        searchValue = value;
        _StsProjectRegistersListFilterData = _StsProjectRegistersList
            .Where(item =>
                item.ProjectName.Contains(searchValue, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }
    private void CloseModal()
    {
        _CustomErrorClass.IsError = false;
        _CustomErrorClass.UserMessage ="";

    }
    private void ShowErrorDetail()
    {
        _CustomErrorClass.IsError = true;
        _CustomErrorClass.UserMessage = _CustomErrorClass.ActualException;
    }
    protected override async Task OnInitializedAsync()
    {
        _User = (await _AuthenticationStateTask).User;

        if (_User.Identity.IsAuthenticated)
        {
            _StsProjectRegister.ProjectCode = _StsProjectRegisterService.MissingSequenceNo(Convert.ToInt32(_User.FindFirst("CompanyID").Value));
            _StsProjectRegister.ProjectNo = Convert.ToInt32(_StsProjectRegister.ProjectCode);
            _StsProjectRegister.ProjectDeploymentDate = DateTime.Now;
            _StsProjectRegister.ProjectSupportDate = DateTime.Now;
            _StsProjectRegister.ProjectExpiryDate = DateTime.Now.AddMonths(3);
            _StsProjectRegister.CompanyId = Convert.ToInt32(_User.FindFirst("CompanyID").Value);
            _StsProjectRegister.RegisterDate = DateTime.Now;
            _StsProjectRegister.RegisteredBy = Convert.ToInt32(_User.FindFirst("Userid").Value);

            await LoadProjectsList();

        }

    }
    private void RefreshProjectRegisterOnSaving()
    {
        _StsProjectRegister =new StsProjectRegister();
        _StsProjectRegister.ProjectCode = _StsProjectRegisterService.MissingSequenceNo(Convert.ToInt32(_User.FindFirst("CompanyID").Value));
        _StsProjectRegister.ProjectNo = Convert.ToInt32(_StsProjectRegister.ProjectCode);
        _StsProjectRegister.ProjectDeploymentDate = DateTime.Now;
        _StsProjectRegister.ProjectSupportDate = DateTime.Now;
        _StsProjectRegister.ProjectExpiryDate = DateTime.Now.AddMonths(3);
        _StsProjectRegister.CompanyId = Convert.ToInt32(_User.FindFirst("CompanyID").Value);
        _StsProjectRegister.RegisterDate = DateTime.Now;
        _StsProjectRegister.RegisteredBy = Convert.ToInt32(_User.FindFirst("Userid").Value);
        IsDeleteRecords = false;
    }
    protected  override  async Task OnAfterRenderAsync (bool firsRender)
    {
        if(firsRender)
        {
            //await JSRuntime.InvokeVoidAsync("initDataTable");
        }

    }

   
    private async Task<bool> ValidateFields()
    {
        bool AllValuesareValid = true;
        if(string.IsNullOrEmpty(_StsProjectRegister.ProjectName))
        {
            IsProjectName = true;
            AllValuesareValid = false;

        }
        if (AllValuesareValid)
        {
            bool isUpdateRecords = false;
            if (_StsProjectRegister.ProjectId > 0)
            {

                (_CustomErrorClass, _StsProjectNew1) = await _StsProjectRegisterService.UpdateProject(_StsProjectRegister);
                isUpdateRecords = true;
            }
            else
            {
                (_CustomErrorClass, _StsProjectNew1) = await _StsProjectRegisterService.AddProjectAsync(_StsProjectRegister);
            }
            if (!_CustomErrorClass.IsError)
            {
                if (!isUpdateRecords)
                {
                    _StsProjectRegistersList.Insert(0, _StsProjectNew1);
                    _StsProjectRegistersListFilterData = _StsProjectRegistersList;
                }
                await _StsProjectNew.Reload();
                RefreshProjectRegisterOnSaving();
                StateHasChanged();
                return await Task.FromResult(true);
            }
            else
            {
                return await Task.FromResult(false);
            }

        }
        
        return await Task.FromResult(false);
    }

    //private void StartHighlightTimer()
    //{
    //    if (highlightTimer != null)
    //    {
    //        highlightTimer.Dispose();
    //    }


    //    const int highlightingDuration = 10000;

    //    highlightTimer = new Timer(EndHighlighting, null, highlightingDuration, Timeout.Infinite);
    //}

    //private void EndHighlighting(object state)
    //{

    //    InvokeAsync(() => StateHasChanged());
    //}

    private void CustomRowRender(RowRenderEventArgs<StsProjectRegister> args)
    {
        if (args.Data == _StsProjectNew1)
        {

            //args.Attributes.Add("style", $"background-color:blue;font-weight:bold;");
            args.Attributes.Add("style", $"background-color:00FF00;color:#00FF00;font-weight:bold;");

        }
    }
    private void SelectRowData(DataGridRowMouseEventArgs<StsProjectRegister> args)
    {
        if (args.Data.ProjectId>0)
        {

            _StsProjectRegister = _StsProjectRegistersList.FirstOrDefault(pr => pr.ProjectId == (args.Data.ProjectId));
            StateHasChanged();
        }
    }

    
   

}
